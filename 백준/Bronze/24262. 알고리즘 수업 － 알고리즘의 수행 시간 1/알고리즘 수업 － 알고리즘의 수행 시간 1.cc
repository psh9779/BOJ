// 문제에 주어진 MenOfPassion 알고리즘에서 "# 코드1"은 입력의 크기에 상관없이 1회 수행된다.
// O(n)은 n에 비례하는 "수행 횟수"를 나타내는 표기법.
// 즉 시간복잡도는 O(1)이며, 수행 횟수를 다항식으로 나타내었을 때 최고차항의 차수는 0이다.

#include <iostream>
using namespace std;

int main() {
	int n;    // 1 <= n(입력 값) <= 500,000
	cin >> n;
	cout << "1\n";    // 코드1의 수행횟수는 항상 1회
	cout << "0\n";    // 수행 횟수를 다항식으로 나타내었을 때, 최고차항의 차수는 0

	return 0;
}






/*
시간 복잡도(Time Complexity)
- 알고리즘이 입력 n에 대해 얼마나 빠르게 수행되는지 평가
- 연산 횟수 또는 소요 시간을 n의 함수로 나타냄

빅오(Big-O) 표기법
- 최악의 수행 시간을 나타냄
- 상수와 낮은 차수 무시
- n이 충분히 클 때 기준으로 표기
- "최악의 경우 기준"으로 분석

- 대표적 예시:
  O(1)      : 입력 크기와 관계없이 일정 (예: 변수 초기화, 단순 출력)
  O(log n)  : 이진 탐색 등
  O(n)      : 단일 반복문
  O(n log n): 합병/힙 정렬
  O(n^2)    : 이중 반복문, 버블 정렬
  O(2^n)    : 재귀 피보나치(메모이제이션 없을 때)
		* 메모이제이션 : 계산 결과를 저장하여 다음에 같은 값을 계산할 때 저장된 값을 사용하는 방식
  O(n!)     : 순열 생성 (n개의 서로 다른 원소를 모든 가능한 순서로 배열하는 방법 수 == n!)

시간 복잡도 계산 팁
- 반복문 깊이 확인 (1중: O(n), 2중: O(n^2))
- 재귀식 분석 (예: T(n) = 2*T(n/2)+n → O(n log n))
- 상수와 낮은 차수 무시 (3n^2 + 2n + 100 → O(n^2))
*/